{{ $keypath := env "NIFI_PROPERTIES_KPATH" }}
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Core Properties #
nifi.flow.configuration.file={{ keyOrDefault (print $keypath "nifi.flow.configuration.file") "./conf/flow.xml.gz" }}
nifi.flow.configuration.archive.enabled={{ keyOrDefault (print $keypath "nifi.flow.configuration.archive.enabled") "true" }}
nifi.flow.configuration.archive.dir={{ keyOrDefault (print $keypath "nifi.flow.configuration.archive.dir") "./conf/archive/" }}
nifi.flow.configuration.archive.max.time={{ keyOrDefault (print $keypath "nifi.flow.configuration.archive.max.time") "30 days" }}
nifi.flow.configuration.archive.max.storage={{ keyOrDefault (print $keypath "nifi.flow.configuration.archive.max.storage") "500 MB" }}
nifi.flow.configuration.archive.max.count={{ keyOrDefault (print $keypath "nifi.flow.configuration.archive.max.count") "" }}
nifi.flowcontroller.autoResumeState={{ keyOrDefault (print $keypath "nifi.flowcontroller.autoResumeState") "true" }}
nifi.flowcontroller.graceful.shutdown.period={{ keyOrDefault (print $keypath "nifi.flowcontroller.graceful.shutdown.period") "10 sec" }}
nifi.flowservice.writedelay.interval={{ keyOrDefault (print $keypath "nifi.flowservice.writedelay.interval") "500 ms" }}
nifi.administrative.yield.duration={{ keyOrDefault (print $keypath "nifi.administrative.yield.duration") "30 sec" }}
# If a component has no work to do (is "bored"), how long should we wait before checking again for work?
nifi.bored.yield.duration={{ keyOrDefault (print $keypath "nifi.bored.yield.duration") "10 millis" }}
nifi.queue.backpressure.count={{ keyOrDefault (print $keypath "nifi.queue.backpressure.count") "10000" }}
nifi.queue.backpressure.size={{ keyOrDefault (print $keypath "nifi.queue.backpressure.size") "1 GB" }}

nifi.authorizer.configuration.file={{ keyOrDefault (print $keypath "nifi.authorizer.configuration.file") "./conf/authorizers.xml" }}
nifi.login.identity.provider.configuration.file={{ keyOrDefault (print $keypath "nifi.login.identity.provider.configuration.file") "./conf/login-identity-providers.xml" }}
nifi.templates.directory={{ keyOrDefault (print $keypath "nifi.templates.directory") "./conf/templates" }}
nifi.ui.banner.text={{ keyOrDefault (print $keypath "nifi.ui.banner.text") "" }}
nifi.ui.autorefresh.interval={{ keyOrDefault (print $keypath "nifi.ui.autorefresh.interval") "30 sec" }}
nifi.nar.library.directory={{ keyOrDefault (print $keypath "nifi.nar.library.directory") "./lib" }}
nifi.nar.library.autoload.directory={{ keyOrDefault (print $keypath "nifi.nar.library.autoload.directory") "./extensions" }}
nifi.nar.working.directory={{ keyOrDefault (print $keypath "nifi.nar.working.directory") "./work/nar/" }}
nifi.documentation.working.directory={{ keyOrDefault (print $keypath "nifi.documentation.working.directory") "./work/docs/components" }}

####################
# State Management #
####################
nifi.state.management.configuration.file={{ keyOrDefault (print $keypath "nifi.state.management.configuration.file") "./conf/state-management.xml" }}
# The ID of the local state provider
nifi.state.management.provider.local={{ keyOrDefault (print $keypath "nifi.state.management.provider.local") "local-provider" }}
# The ID of the cluster-wide state provider. This will be ignored if NiFi is not clustered but must be populated if running in a cluster.
nifi.state.management.provider.cluster={{ keyOrDefault (print $keypath "nifi.state.management.provider.cluster") "zk-provider" }}
# Specifies whether or not this instance of NiFi should run an embedded ZooKeeper server
nifi.state.management.embedded.zookeeper.start={{ keyOrDefault (print $keypath "nifi.state.management.embedded.zookeeper.start") "false" }}
# Properties file that provides the ZooKeeper properties to use if <nifi.state.management.embedded.zookeeper.start> is set to true
nifi.state.management.embedded.zookeeper.properties={{ keyOrDefault (print $keypath "nifi.state.management.embedded.zookeeper.properties") "./conf/zookeeper.properties" }}


# H2 Settings
nifi.database.directory={{ keyOrDefault (print $keypath "nifi.database.directory") "./database_repository" }}
nifi.h2.url.append={{ keyOrDefault (print $keypath "nifi.h2.url.append") ";LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE" }}

# FlowFile Repository
nifi.flowfile.repository.implementation={{ keyOrDefault (print $keypath "nifi.flowfile.repository.implementation") "org.apache.nifi.controller.repository.WriteAheadFlowFileRepository" }}
nifi.flowfile.repository.wal.implementation={{ keyOrDefault (print $keypath "nifi.flowfile.repository.wal.implementation") "org.apache.nifi.wali.SequentialAccessWriteAheadLog" }}
nifi.flowfile.repository.directory={{ keyOrDefault (print $keypath "nifi.flowfile.repository.directory") "./flowfile_repository" }}
nifi.flowfile.repository.partitions={{ keyOrDefault (print $keypath "nifi.flowfile.repository.partitions") "256" }}
nifi.flowfile.repository.checkpoint.interval={{ keyOrDefault (print $keypath "nifi.flowfile.repository.checkpoint.interval") "2 mins" }}
nifi.flowfile.repository.always.sync={{ keyOrDefault (print $keypath "nifi.flowfile.repository.always.sync") "false" }}

nifi.swap.manager.implementation={{ keyOrDefault (print $keypath "nifi.swap.manager.implementation") "org.apache.nifi.controller.FileSystemSwapManager" }}
nifi.queue.swap.threshold={{ keyOrDefault (print $keypath "nifi.queue.swap.threshold") "20000" }}
nifi.swap.in.period={{ keyOrDefault (print $keypath "nifi.swap.in.period") "5 sec" }}
nifi.swap.in.threads={{ keyOrDefault (print $keypath "nifi.swap.in.threads") "1" }}
nifi.swap.out.period={{ keyOrDefault (print $keypath "nifi.swap.out.period") "5 sec" }}
nifi.swap.out.threads={{ keyOrDefault (print $keypath "nifi.swap.out.threads") "4" }}

# Content Repository
nifi.content.repository.implementation={{ keyOrDefault (print $keypath "nifi.content.repository.implementation") "org.apache.nifi.controller.repository.FileSystemRepository" }}
nifi.content.claim.max.appendable.size={{ keyOrDefault (print $keypath "nifi.content.claim.max.appendable.size") "1 MB" }}
nifi.content.claim.max.flow.files={{ keyOrDefault (print $keypath "nifi.content.claim.max.flow.files") "100" }}
nifi.content.repository.directory.default={{ keyOrDefault (print $keypath "nifi.content.repository.directory.default") "./content_repository" }}
nifi.content.repository.archive.max.retention.period={{ keyOrDefault (print $keypath "nifi.content.repository.archive.max.retention.period") "12 hours" }}
nifi.content.repository.archive.max.usage.percentage={{ keyOrDefault (print $keypath "nifi.content.repository.archive.max.usage.percentage") "50%" }}
nifi.content.repository.archive.enabled={{ keyOrDefault (print $keypath "nifi.content.repository.archive.enabled") "true" }}
nifi.content.repository.always.sync={{ keyOrDefault (print $keypath "nifi.content.repository.always.sync") "false" }}
nifi.content.viewer.url={{ keyOrDefault (print $keypath "nifi.content.viewer.url") "../nifi-content-viewer/" }}

# Provenance Repository Properties
nifi.provenance.repository.implementation={{ keyOrDefault (print $keypath "nifi.provenance.repository.implementation") "org.apache.nifi.provenance.WriteAheadProvenanceRepository" }}
nifi.provenance.repository.debug.frequency={{ keyOrDefault (print $keypath "nifi.provenance.repository.debug.frequency") "1_000_000" }}
nifi.provenance.repository.encryption.key.provider.implementation={{ keyOrDefault (print $keypath "nifi.provenance.repository.encryption.key.provider.implementation") "" }}
nifi.provenance.repository.encryption.key.provider.location={{ keyOrDefault (print $keypath "nifi.provenance.repository.encryption.key.provider.location") "" }}
nifi.provenance.repository.encryption.key.id={{ keyOrDefault (print $keypath "nifi.provenance.repository.encryption.key.id") "" }}
nifi.provenance.repository.encryption.key={{ keyOrDefault (print $keypath "nifi.provenance.repository.encryption.key") "" }}

# Persistent Provenance Repository Properties
nifi.provenance.repository.directory.default={{ keyOrDefault (print $keypath "nifi.provenance.repository.directory.default") "./provenance_repository" }}
nifi.provenance.repository.max.storage.time={{ keyOrDefault (print $keypath "nifi.provenance.repository.max.storage.time") "24 hours" }}
nifi.provenance.repository.max.storage.size={{ keyOrDefault (print $keypath "nifi.provenance.repository.max.storage.size") "1 GB" }}
nifi.provenance.repository.rollover.time={{ keyOrDefault (print $keypath "nifi.provenance.repository.rollover.time") "30 secs" }}
nifi.provenance.repository.rollover.size={{ keyOrDefault (print $keypath "nifi.provenance.repository.rollover.size") "100 MB" }}
nifi.provenance.repository.query.threads={{ keyOrDefault (print $keypath "nifi.provenance.repository.query.threads") "2" }}
nifi.provenance.repository.index.threads={{ keyOrDefault (print $keypath "nifi.provenance.repository.index.threads") "2" }}
nifi.provenance.repository.compress.on.rollover={{ keyOrDefault (print $keypath "nifi.provenance.repository.compress.on.rollover") "true" }}
nifi.provenance.repository.always.sync={{ keyOrDefault (print $keypath "nifi.provenance.repository.always.sync") "false" }}
# Comma-separated list of fields. Fields that are not indexed will not be searchable. Valid fields are:
# EventType, FlowFileUUID, Filename, TransitURI, ProcessorID, AlternateIdentifierURI, Relationship, Details
nifi.provenance.repository.indexed.fields={{ keyOrDefault (print $keypath "nifi.provenance.repository.indexed.fields") "EventType, FlowFileUUID, Filename, ProcessorID, Relationship" }}
# FlowFile Attributes that should be indexed and made searchable.  Some examples to consider are filename, uuid, mime.type
nifi.provenance.repository.indexed.attributes={{ keyOrDefault (print $keypath "nifi.provenance.repository.indexed.attributes") "" }}
# Large values for the shard size will result in more Java heap usage when searching the Provenance Repository
# but should provide better performance
nifi.provenance.repository.index.shard.size={{ keyOrDefault (print $keypath "nifi.provenance.repository.index.shard.size") "500 MB" }}
# Indicates the maximum length that a FlowFile attribute can be when retrieving a Provenance Event from
# the repository. If the length of any attribute exceeds this value, it will be truncated when the event is retrieved.
nifi.provenance.repository.max.attribute.length={{ keyOrDefault (print $keypath "nifi.provenance.repository.max.attribute.length") "65536" }}
nifi.provenance.repository.concurrent.merge.threads={{ keyOrDefault (print $keypath "nifi.provenance.repository.concurrent.merge.threads") "2" }}


# Volatile Provenance Respository Properties
nifi.provenance.repository.buffer.size={{ keyOrDefault (print $keypath "nifi.provenance.repository.buffer.size") "100000" }}

# Component Status Repository
nifi.components.status.repository.implementation={{ keyOrDefault (print $keypath "nifi.components.status.repository.implementation") "org.apache.nifi.controller.status.history.VolatileComponentStatusRepository" }}
nifi.components.status.repository.buffer.size={{ keyOrDefault (print $keypath "nifi.components.status.repository.buffer.size") "1440" }}
nifi.components.status.snapshot.frequency={{ keyOrDefault (print $keypath "nifi.components.status.snapshot.frequency") "1 min" }}

# Site to Site properties
nifi.remote.input.host={{ keyOrDefault (print $keypath "nifi.remote.input.host") "" }}
nifi.remote.input.secure={{ keyOrDefault (print $keypath "nifi.remote.input.secure") "false" }}
nifi.remote.input.socket.port={{ keyOrDefault (print $keypath "nifi.remote.input.socket.port") "" }}
nifi.remote.input.http.enabled={{ keyOrDefault (print $keypath "nifi.remote.input.http.enabled") "true" }}
nifi.remote.input.http.transaction.ttl={{ keyOrDefault (print $keypath "nifi.remote.input.http.transaction.ttl") "30 sec" }}
nifi.remote.contents.cache.expiration={{ keyOrDefault (print $keypath "nifi.remote.contents.cache.expiration") "30 secs" }}

# web properties #
nifi.web.war.directory={{ keyOrDefault (print $keypath "nifi.web.war.directory") "./lib" }}
nifi.web.http.host={{ keyOrDefault (print $keypath "nifi.web.http.host") "" }}
nifi.web.http.port={{ keyOrDefault (print $keypath "nifi.web.http.port") "8080" }}
nifi.web.http.network.interface.default={{ keyOrDefault (print $keypath "nifi.web.http.network.interface.default") "" }}
nifi.web.https.host={{ keyOrDefault (print $keypath "nifi.web.https.host") "" }}
nifi.web.https.port={{ keyOrDefault (print $keypath "nifi.web.https.port") "" }}
nifi.web.https.network.interface.default={{ keyOrDefault (print $keypath "nifi.web.https.network.interface.default") "" }}
nifi.web.jetty.working.directory={{ keyOrDefault (print $keypath "nifi.web.jetty.working.directory") "./work/jetty" }}
nifi.web.jetty.threads={{ keyOrDefault (print $keypath "nifi.web.jetty.threads") "200" }}
nifi.web.max.header.size={{ keyOrDefault (print $keypath "nifi.web.max.header.size") "16 KB" }}
nifi.web.proxy.context.path={{ keyOrDefault (print $keypath "nifi.web.proxy.context.path") "" }}
nifi.web.proxy.host={{ keyOrDefault (print $keypath "nifi.web.proxy.host") "" }}

# security properties #
nifi.sensitive.props.key={{ keyOrDefault (print $keypath "nifi.sensitive.props.key") "" }}
nifi.sensitive.props.key.protected={{ keyOrDefault (print $keypath "nifi.sensitive.props.key.protected") "" }}
nifi.sensitive.props.algorithm={{ keyOrDefault (print $keypath "nifi.sensitive.props.algorithm") "PBEWITHMD5AND256BITAES-CBC-OPENSSL" }}
nifi.sensitive.props.provider={{ keyOrDefault (print $keypath "nifi.sensitive.props.provider") "BC" }}
nifi.sensitive.props.additional.keys={{ keyOrDefault (print $keypath "nifi.sensitive.props.additional.keys") "" }}

nifi.security.keystore={{ keyOrDefault (print $keypath "nifi.security.keystore") "" }}
nifi.security.keystoreType={{ keyOrDefault (print $keypath "nifi.security.keystoreType") "" }}
nifi.security.keystorePasswd={{ keyOrDefault (print $keypath "nifi.security.keystorePasswd") "" }}
nifi.security.keyPasswd={{ keyOrDefault (print $keypath "nifi.security.keyPasswd") "" }}
nifi.security.truststore={{ keyOrDefault (print $keypath "nifi.security.truststore") "" }}
nifi.security.truststoreType={{ keyOrDefault (print $keypath "nifi.security.truststoreType") "" }}
nifi.security.truststorePasswd={{ keyOrDefault (print $keypath "nifi.security.truststorePasswd") "" }}
nifi.security.user.authorizer={{ keyOrDefault (print $keypath "nifi.security.user.authorizer") "managed-authorizer" }}
nifi.security.user.login.identity.provider={{ keyOrDefault (print $keypath "nifi.security.user.login.identity.provider") "" }}
nifi.security.ocsp.responder.url={{ keyOrDefault (print $keypath "nifi.security.ocsp.responder.url") "" }}
nifi.security.ocsp.responder.certificate={{ keyOrDefault (print $keypath "nifi.security.ocsp.responder.certificate") "" }}

# OpenId Connect SSO Properties #
nifi.security.user.oidc.discovery.url={{ keyOrDefault (print $keypath "nifi.security.user.oidc.discovery.url") "" }}
nifi.security.user.oidc.connect.timeout={{ keyOrDefault (print $keypath "nifi.security.user.oidc.connect.timeout") "5 secs" }}
nifi.security.user.oidc.read.timeout={{ keyOrDefault (print $keypath "nifi.security.user.oidc.read.timeout") "5 secs" }}
nifi.security.user.oidc.client.id={{ keyOrDefault (print $keypath "nifi.security.user.oidc.client.id") "" }}
nifi.security.user.oidc.client.secret={{ keyOrDefault (print $keypath "nifi.security.user.oidc.client.secret") "" }}
nifi.security.user.oidc.preferred.jwsalgorithm={{ keyOrDefault (print $keypath "nifi.security.user.oidc.preferred.jwsalgorithm") "" }}

# Apache Knox SSO Properties #
nifi.security.user.knox.url={{ keyOrDefault (print $keypath "nifi.security.user.knox.url") "" }}
nifi.security.user.knox.publicKey={{ keyOrDefault (print $keypath "nifi.security.user.knox.publicKey") "" }}
nifi.security.user.knox.cookieName={{ keyOrDefault (print $keypath "nifi.security.user.knox.cookieName") "hadoop-jwt" }}
nifi.security.user.knox.audiences={{ keyOrDefault (print $keypath "nifi.security.user.knox.audiences") "" }}

# Identity Mapping Properties #
# These properties allow normalizing user identities such that identities coming from different identity providers
# (certificates, LDAP, Kerberos) can be treated the same internally in NiFi. The following example demonstrates normalizing
# DNs from certificates and principals from Kerberos into a common identity string:
#
# nifi.security.identity.mapping.pattern.dn=^CN=(.*?), OU=(.*?), O=(.*?), L=(.*?), ST=(.*?), C=(.*?)$
# nifi.security.identity.mapping.value.dn=$1@$2
# nifi.security.identity.mapping.transform.dn=NONE
# nifi.security.identity.mapping.pattern.kerb=^(.*?)/instance@(.*?)$
# nifi.security.identity.mapping.value.kerb=$1@$2
# nifi.security.identity.mapping.transform.kerb=UPPER

# Group Mapping Properties #
# These properties allow normalizing group names coming from external sources like LDAP. The following example
# lowercases any group name.
#
# nifi.security.group.mapping.pattern.anygroup=^(.*)$
# nifi.security.group.mapping.value.anygroup=$1
# nifi.security.group.mapping.transform.anygroup=LOWER

# cluster common properties (all nodes must have same values) #
nifi.cluster.protocol.heartbeat.interval={{ keyOrDefault (print $keypath "nifi.cluster.protocol.heartbeat.interval") "5 sec" }}
nifi.cluster.protocol.is.secure={{ keyOrDefault (print $keypath "nifi.cluster.protocol.is.secure") "false" }}

# cluster node properties (only configure for cluster nodes) #
nifi.cluster.is.node={{ keyOrDefault (print $keypath "nifi.cluster.is.node") "false" }}
nifi.cluster.node.address={{ keyOrDefault (print $keypath "nifi.cluster.node.address") "" }}
nifi.cluster.node.protocol.port={{ keyOrDefault (print $keypath "nifi.cluster.node.protocol.port") "" }}
nifi.cluster.node.protocol.threads={{ keyOrDefault (print $keypath "nifi.cluster.node.protocol.threads") "10" }}
nifi.cluster.node.protocol.max.threads={{ keyOrDefault (print $keypath "nifi.cluster.node.protocol.max.threads") "50" }}
nifi.cluster.node.event.history.size={{ keyOrDefault (print $keypath "nifi.cluster.node.event.history.size") "25" }}
nifi.cluster.node.connection.timeout={{ keyOrDefault (print $keypath "nifi.cluster.node.connection.timeout") "5 sec" }}
nifi.cluster.node.read.timeout={{ keyOrDefault (print $keypath "nifi.cluster.node.read.timeout") "5 sec" }}
nifi.cluster.node.max.concurrent.requests={{ keyOrDefault (print $keypath "nifi.cluster.node.max.concurrent.requests") "100" }}
nifi.cluster.firewall.file={{ keyOrDefault (print $keypath "nifi.cluster.firewall.file") "" }}
nifi.cluster.flow.election.max.wait.time={{ keyOrDefault (print $keypath "nifi.cluster.flow.election.max.wait.time") "5 mins" }}
nifi.cluster.flow.election.max.candidates={{ keyOrDefault (print $keypath "nifi.cluster.flow.election.max.candidates") "" }}

# cluster load balancing properties #
nifi.cluster.load.balance.host={{ keyOrDefault (print $keypath "nifi.cluster.load.balance.host") "" }}
nifi.cluster.load.balance.port={{ keyOrDefault (print $keypath "nifi.cluster.load.balance.port") "6342" }}
nifi.cluster.load.balance.connections.per.node={{ keyOrDefault (print $keypath "nifi.cluster.load.balance.connections.per.node") "4" }}
nifi.cluster.load.balance.max.thread.count={{ keyOrDefault (print $keypath "nifi.cluster.load.balance.max.thread.count") "8" }}
nifi.cluster.load.balance.comms.timeout={{ keyOrDefault (print $keypath "nifi.cluster.load.balance.comms.timeout") "30 sec" }}

# zookeeper properties, used for cluster management #
nifi.zookeeper.connect.string={{ keyOrDefault (print $keypath "nifi.zookeeper.connect.string") "" }}
nifi.zookeeper.connect.timeout={{ keyOrDefault (print $keypath "nifi.zookeeper.connect.timeout") "3 secs" }}
nifi.zookeeper.session.timeout={{ keyOrDefault (print $keypath "nifi.zookeeper.session.timeout") "3 secs" }}
nifi.zookeeper.root.node={{ keyOrDefault (print $keypath "nifi.zookeeper.root.node") "/nifi" }}

# Zookeeper properties for the authentication scheme used when creating acls on znodes used for cluster management
# Values supported for nifi.zookeeper.auth.type are "default", which will apply world/anyone rights on znodes
# and "sasl" which will give rights to the sasl/kerberos identity used to authenticate the nifi node
# The identity is determined using the value in nifi.kerberos.service.principal and the removeHostFromPrincipal
# and removeRealmFromPrincipal values (which should align with the kerberos.removeHostFromPrincipal and kerberos.removeRealmFromPrincipal
# values configured on the zookeeper server).
nifi.zookeeper.auth.type={{ keyOrDefault (print $keypath "nifi.zookeeper.auth.type") "" }}
nifi.zookeeper.kerberos.removeHostFromPrincipal={{ keyOrDefault (print $keypath "nifi.zookeeper.kerberos.removeHostFromPrincipal") "" }}
nifi.zookeeper.kerberos.removeRealmFromPrincipal={{ keyOrDefault (print $keypath "nifi.zookeeper.kerberos.removeRealmFromPrincipal") "" }}

# kerberos #
nifi.kerberos.krb5.file={{ keyOrDefault (print $keypath "nifi.kerberos.krb5.file") "" }}

# kerberos service principal #
nifi.kerberos.service.principal={{ keyOrDefault (print $keypath "nifi.kerberos.service.principal") "" }}
nifi.kerberos.service.keytab.location={{ keyOrDefault (print $keypath "nifi.kerberos.service.keytab.location") "" }}

# kerberos spnego principal #
nifi.kerberos.spnego.principal={{ keyOrDefault (print $keypath "nifi.kerberos.spnego.principal") "" }}
nifi.kerberos.spnego.keytab.location={{ keyOrDefault (print $keypath "nifi.kerberos.spnego.keytab.location") "" }}
nifi.kerberos.spnego.authentication.expiration={{ keyOrDefault (print $keypath "nifi.kerberos.spnego.authentication.expiration") "12 hours" }}

# external properties files for variable registry
# supports a comma delimited list of file locations
nifi.variable.registry.properties={{ keyOrDefault (print $keypath "nifi.variable.registry.properties") "" }}
